package zwu.ceshi;
import com.swetake.util.Qrcode;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;

import java.awt.Font;
import javax.swing.JLabel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.*;


import java.io.File;
import java.io.IOException;



public class zysx3 extends JFrame implements ActionListener {

    String a;
    //设置按钮
    JButton Encrypt = new JButton("加密并生成二维码");
    JButton Decrypt = new JButton("解密");

    //设置文本框
    JTextPane txt1 = new  JTextPane();
    JTextPane txt2 = new  JTextPane();
    JTextPane txt3 = new  JTextPane();
    JTextPane txt4 = new  JTextPane();

    //设置标签
    JLabel jl1 = new JLabel("输入要加密的明文：");
    JLabel jl2 = new JLabel("生成二维码：");
    JLabel jl3 = new JLabel("密文内容：");
    JLabel jl4 = new JLabel("解密后的密文：");

    public  void init() {

        //设置窗口
        JFrame frame = new JFrame("保密信息二维码生成器");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocation(220, 160);
        frame.setSize(540, 360);
        frame.setVisible(true);
        frame.setLayout(null);


        //将按钮添加到窗口
        frame.add(Encrypt);
        frame.add(Decrypt);

        Encrypt.setSize(180,40);
        Encrypt.setLocation(22,200);

        Decrypt.setSize(180,40);
        Decrypt.setLocation(22,250);

        //设置输入明文文本框的参数
        txt1.setPreferredSize(new Dimension(44, 40));
        frame.add(txt1);
        txt1.setFont(new Font("微软雅黑",Font.BOLD,13));
        txt1.setSize(200, 50);
        txt1.setLocation(16, 30);


        //设置生成二维码的文本框参数
        txt2.setPreferredSize(new Dimension(44, 40));
        frame.add(txt2);
        txt2.setFont(new Font("微软雅黑",Font.BOLD,13));
        txt2.setSize(134, 134);
        txt2.setLocation(300, 30);

        //设置输出密文文本框的参数
        txt3.setPreferredSize(new Dimension(44, 40));
        frame.add(txt3);
        txt3.setFont(new Font("微软雅黑",Font.BOLD,13));
        txt3.setSize(200, 55);
        txt3.setLocation(16, 120);

        //设置解密后的明文文本框的参数
        txt4.setPreferredSize(new Dimension(44, 40));
        frame.add(txt4);
        txt4.setFont(new Font("微软雅黑",Font.BOLD,13));
        txt4.setSize(200, 55);
        txt4.setLocation(270, 220);


        //设置标签的参数
        jl1.setBounds(20,0,194,29);
        frame.add(jl1);
        jl2.setBounds(300,0,194,29);
        frame.add(jl2);
        jl3.setBounds(20,90,194,29);
        frame.add(jl3);
        jl4.setBounds(280,190,194,29);
        frame.add(jl4);


        jl1.setFont(new Font("微软雅黑",Font.BOLD,13));
        jl2.setFont(new Font("微软雅黑",Font.BOLD,13));
        jl3.setFont(new Font("微软雅黑",Font.BOLD,13));
        jl4.setFont(new Font("微软雅黑",Font.BOLD,13));

        Encrypt.addActionListener(this);
        Decrypt.addActionListener(this);


    }



    @Override
    public void actionPerformed(ActionEvent e) {
        //将输入的明文进行加密
        if (e.getSource() == Encrypt) {
            a=txt1.getText();

            //生成二维码
            int v =6;
            int width = 67 + 12 * (v - 1);
            int height = 67 + 12 * (v - 1);


            Qrcode x = new Qrcode();
            /**
             * 纠错等级分为
             * level L : 最大 7% 的错误能够被纠正；
             * level M : 最大 15% 的错误能够被纠正；
             * level Q : 最大 25% 的错误能够被纠正；
             * level H : 最大 30% 的错误能够被纠正；
             */
            x.setQrcodeErrorCorrect('L');
            x.setQrcodeEncodeMode('B');//注意版本信息 N代表数字 、A代表 a-z,A-Z、B代表 其他)
            x.setQrcodeVersion(v);//版本号  1-40
            String qrData = a;//内容信息

            byte[] d = new byte[0];//汉字转格式需要抛出异常
            try {
                d = qrData.getBytes("utf-8");
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }

            //缓冲区
            BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_BGR);

            //绘图
            Graphics2D gs = bufferedImage.createGraphics();

            gs.setBackground(Color.WHITE);
            gs.setColor(Color.BLACK);
            gs.clearRect(0, 0, width, height);

            //偏移量
            int pixoff = 2;


            /**
             * 容易踩坑的地方
             * 1.注意for循环里面的i，j的顺序，
             *   s[j][i]二维数组的j，i的顺序要与这个方法中的 gs.fillRect(j*3+pixoff,i*3+pixoff, 3, 3);
             *   顺序匹配，否则会出现解析图片是一串数字
             * 2.注意此判断if (d.length > 0 && d.length < 120)
             *   是否会引起字符串长度大于120导致生成代码不执行，二维码空白
             *   根据自己的字符串大小来设置此配置
             */
            if (d.length > 0 && d.length < 120) {
                boolean[][] s = x.calQrcode(d);

                for (int i = 0; i < s.length; i++) {
                    for (int j = 0; j < s.length; j++) {
                        if (s[j][i]) {
                            gs.fillRect(j * 3 + pixoff, i * 3 + pixoff, 3, 3);
                        }
                    }
                }
            }
            gs.dispose();
            bufferedImage.flush();
            //设置图片格式，与输出的路径
            try {
                ImageIO.write(bufferedImage, "png", new File("D:/二维码/qrcode.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            System.out.println("二维码生成完毕");


            //放入二维码
            setBounds(200, 200, 500, 600);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            Icon icon=new ImageIcon("D:/二维码/qrcode.png");//获取相应路径下的图片文件

            txt2.insertIcon(icon);//添加二维码到文本框里

            



        }





        //将生成的密文解密
        if(e.getSource() ==Decrypt){


        }
    }

    public static void main(String[] args)throws IOException  {
        new zwu.ceshi.zysx3().init();
    }
}


