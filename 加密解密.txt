package ZYSX;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Scanner;

public class test1 {
        public static  String default_key = randomStr();//随机生成加密需要的default_key
        static final Base64.Decoder decoder = Base64.getDecoder();
        static final Base64.Encoder encoder = Base64.getEncoder();
        static final String charset = "utf-8";
        static final String AES = "AES";
        /**
         * 加密明文
         * 先AES加密，再Base64加密
         */
        public static String encoded(String content){
            String encode = encode(content);//AES加密
            if(encode == null) return null;//加密失败返回空
            try {
                String s = encoder.encodeToString(encode.getBytes(charset));//Base64加密
                return s;
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            return null;
        }
        /**
         * 解密密文
         * 先Base64解密，再AES解密
         */
        public static String decoded(String content){
            try {
                String s = new String(decoder.decode(content), charset);//Base64解密
                String decode = decode(s);//AES解密
                return decode;
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            return null;//解密失败返回空
        }
        /**
         * AES加密
         */
        public static String encode(String content){
            return encode(default_key, content);
        }
        /**
         * AES解密
         */
        public static String decode(String content){
            return decode(default_key, content);
        }
        /*
         * AES加密
         * 1.构造密钥生成器
         * 2.根据ecnodeRules规则初始化密钥生成器
         * 3.产生密钥
         * 4.创建和初始化密码器
         * 5.内容加密
         * 6.返回字符串
         */
        public static String encode(String encodeRules, String content){
            try {
                //1.构造密钥生成器，指定为AES算法,不区分大小写
                KeyGenerator keygen = KeyGenerator.getInstance(AES);
                //2.根据ecnodeRules规则初始化密钥生成器
                //生成一个128位的随机源,根据传入的字节数组
//            keygen.init(128, new SecureRandom(encodeRules.getBytes()));
                SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
                random.setSeed(encodeRules.getBytes());
                keygen.init(128, random);
                //3.产生原始对称密钥
                SecretKey original_key = keygen.generateKey();
                //4.获得原始对称密钥的字节数组
                byte [] raw = original_key.getEncoded();
                //5.根据字节数组生成AES密钥
                SecretKey key = new SecretKeySpec(raw, AES);
                //6.根据指定算法AES自成密码器
                Cipher cipher = Cipher.getInstance(AES);
                //7.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密解密(Decrypt_mode)操作，第二个参数为使用的KEY
                cipher.init(Cipher.ENCRYPT_MODE, key);
                //8.获取加密内容的字节数组(这里要设置为utf-8)不然内容中如果有中文和英文混合中文就会解密为乱码
                byte [] byte_encode = content.getBytes(charset);
                //9.根据密码器的初始化方式--加密：将数据加密
                byte [] byte_AES = cipher.doFinal(byte_encode);
                //10.将加密后的数据转换为字符串
                //这里用Base64Encoder中会找不到包
                //解决办法：
                //在项目的Build path中先移除JRE System Library，再添加库JRE System Library，重新编译后就一切正常了。
                String AES_encode = new String(new BASE64Encoder().encode(byte_AES));
                //11.将字符串返回
                return AES_encode;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;//加密失败返回空
        }
        /*
         * AES解密
         * 解密过程：
         * 1.同加密1-4步
         * 2.将加密后的字符串反纺成byte[]数组
         * 3.将加密内容解密
         */
        public static String decode(String encodeRules, String content){
            try {
                //1.构造密钥生成器，指定为AES算法,不区分大小写
                KeyGenerator keygen = KeyGenerator.getInstance(AES);
                //2.根据ecnodeRules规则初始化密钥生成器
                //生成一个128位的随机源,根据传入的字节数组
//            keygen.init(128, new SecureRandom(encodeRules.getBytes()));
                SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
                random.setSeed(encodeRules.getBytes());
                keygen.init(128, random);
                //3.产生原始对称密钥
                SecretKey original_key = keygen.generateKey();
                //4.获得原始对称密钥的字节数组
                byte [] raw = original_key.getEncoded();
                //5.根据字节数组生成AES密钥
                SecretKey key = new SecretKeySpec(raw, AES);
                //6.根据指定算法AES自成密码器
                Cipher cipher = Cipher.getInstance(AES);
                //7.初始化密码器，第一个参数为加密(Encrypt_mode)或者解密(Decrypt_mode)操作，第二个参数为使用的KEY
                cipher.init(Cipher.DECRYPT_MODE, key);
                //8.将加密并编码后的内容解码成字节数组
                byte [] byte_content = new BASE64Decoder().decodeBuffer(content);
                /*
                 * 解密
                 */
                byte [] byte_decode = cipher.doFinal(byte_content);
                String AES_decode = new String(byte_decode,charset);
                return AES_decode;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;//解密失败返回空
        }

//随机生成加密需要的default_key参数
    private static String randomStr ()  {
            int length = 10;
            char[] ss = new char[length];//用于保存随机生成的字符串；
            int i=0;
            while(i<length) {
                int f = (int) (Math.random()*3%3);
                if(f==0)
                    ss[i] = (char) ('A'+Math.random()*26);
                else if(f==1)
                    ss[i] = (char) ('a'+Math.random()*26);
                else
                    ss[i] = (char) ('0'+Math.random()*10);
                i++;
            }
            return new String(ss);
        }
//主函数
    public static void main(String[] args) {

        //获取文本框输入数值
        System.out.println("请输入待加密的明文:");
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();

        //加密明文，生成密文
        String s = encoded(a);
        System.out.println("经过Base64和AES加密后的密文为:\t"+s);

        //二维码生成

        //二维码识别

        //解密二维码里的密文
        String s1 = decoded(s);
        System.out.println("最终解密结果:\t"+s1);
    }
}
